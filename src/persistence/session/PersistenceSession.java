package persistence.session;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import persistence.configuration.AbstractPersistentProperty;
import persistence.configuration.C3P0Configuration;
import persistence.configuration.ConnectionConfiguration;
import persistence.configuration.ManyToOneProperty;
import persistence.configuration.PersistenceConfiguration;
import persistence.configuration.PersistentClass;
import persistence.configuration.SimpleColumnProperty;
import persistence.criteria.Criteria;
import persistence.exception.PersistenceException;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mysql.jdbc.Statement;

public class PersistenceSession {

	private PersistenceSessionFactory factory;
	private Connection connection;
	private static Logger log = LoggerFactory
			.getLogger(PersistenceSession.class);

	public PersistenceSession(PersistenceSessionFactory aFactory)
			throws PersistenceException {
		factory = aFactory;
		open();
	}

	public void open() throws PersistenceException {
		try {
			ConnectionConfiguration connectionConfiguration = factory.getPersistenceConfiguration().getConnectionConfiguration();
			ComboPooledDataSource cpds = new ComboPooledDataSource();
			cpds.setDriverClass(connectionConfiguration.getDriverClass());
			cpds.setJdbcUrl(connectionConfiguration.getUrl());
			cpds.setUser(connectionConfiguration.getUserName());
			cpds.setPassword(connectionConfiguration.getPassword());

			C3P0Configuration c3p0Configuration = connectionConfiguration.getC3p0Configuration();
			if (c3p0Configuration != null) {
				if (c3p0Configuration.getMaxStatements() > 0) {
					cpds.setMaxStatements(c3p0Configuration.getMaxStatements());
				}
				if (c3p0Configuration.getTimeout() > 0) {
					cpds.setLoginTimeout((int) c3p0Configuration.getTimeout());
				}
				if (c3p0Configuration.getMinSize() > 0) {
					cpds.setMinPoolSize(c3p0Configuration.getMinSize());
				}
				if (c3p0Configuration.getMaxSize() > 0) {
					cpds.setMaxPoolSize(c3p0Configuration.getMaxSize());
				}
			}
			connection = cpds.getConnection();
		} catch (Exception e) {
			throw new PersistenceException("Error getting Connection"+ e.getMessage());
		}
	}

	public void save(Object bean) throws PersistenceException {
		PersistenceConfiguration configuration = getFactory().getPersistenceConfiguration();
		PersistentClass persistentClass = configuration.getPersistentClass(bean.getClass());
		if (persistentClass == null) {
			String errorMessage = bean.getClass().getName() + " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		try {
			String insertQuery = persistentClass.getInsertStatement();
			PreparedStatement statement = getConnection().prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			boolean autoGenerated = false;
			for (AbstractPersistentProperty aProperty : persistentClass.getPersistentProperties()) {
				if (aProperty instanceof SimpleColumnProperty) {
					if (((SimpleColumnProperty) aProperty).isId() && ((SimpleColumnProperty) aProperty).isAutoGenerated()) {
						autoGenerated = true;
						continue;
					}
					Object o = aProperty.getValue(bean);
					if (o == null)
						statement.setNull(i, Types.BIGINT);
					else
						statement.setObject(i, o);
					i++;
				}
				if (aProperty instanceof ManyToOneProperty) {
					ManyToOneProperty foreignKey = (ManyToOneProperty) aProperty;
					Object o = foreignKey.getIdValue(bean);
					if (o == null)
						statement.setNull(i, Types.BIGINT);
					else
						statement.setObject(i, o);
					i++;
				}
			}
			statement.execute();
			
			if (autoGenerated == true) {
			    ResultSet rs = statement.getGeneratedKeys();
			    if (rs.next()) {
			        persistentClass.getId().setValue(bean, rs.getInt(1));
			    } else {
			    	throw new PersistenceException("Erreur lors de la récupération de la generated KEY");
			    }
			}
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}
	
	public void update(Object bean) throws PersistenceException {
		PersistenceConfiguration configuration = getFactory().getPersistenceConfiguration();
		PersistentClass persistentClass = configuration.getPersistentClass(bean.getClass());
		if (persistentClass == null) {
			String errorMessage = bean.getClass().getName()+ " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		try {
			String updateQuery = persistentClass.getUpdateStatement();
			PreparedStatement statement = getConnection().prepareStatement(updateQuery);
			int i = 1;
			Object key = null;
			for (AbstractPersistentProperty aProperty : persistentClass.getPersistentProperties()) {
				if (aProperty instanceof SimpleColumnProperty) {
					if (((SimpleColumnProperty) aProperty).isId()) {
						key = aProperty.getValue(bean);
						continue;
					}
					Object o = aProperty.getValue(bean);
					if (o == null)
						statement.setNull(i, Types.BIGINT);
					else
						statement.setObject(i, o);
					i++;
				}
				if (aProperty instanceof ManyToOneProperty) {
					ManyToOneProperty foreignKey = (ManyToOneProperty) aProperty;
					Object o = foreignKey.getIdValue(bean);
					if (o == null)
						statement.setNull(i, Types.BIGINT);
					else
						statement.setObject(i, o);
					i++;
				}
			}
			statement.setObject(i, key);
			int rowUpdated = statement.executeUpdate();
			if (rowUpdated == 0) {
				String errorMessage = "Aucune entité n'a été updaté en base";
				log.error(errorMessage);
				throw new PersistenceException(errorMessage);
			}
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}

	public Object get(Class<?> objectClass, Object value) throws PersistenceException {
		PersistenceConfiguration configuration = getFactory().getPersistenceConfiguration();
		PersistentClass persistentClass = configuration.getPersistentClass(objectClass);
		if (persistentClass == null) {
			String errorMessage = objectClass.getName()+ " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		String selectQuery = persistentClass.getSelectByIdStatement();
		try {
			PreparedStatement statement = getConnection().prepareStatement(selectQuery);
			statement.setObject(1, value);
			ResultSet result = statement.executeQuery();
			ResultSetParser parser = new ResultSetParser(result, persistentClass, this);
			if (parser.hasNext() == false) {
				String errorMessage = "L'id ne correspond a aucun objet stocke en base";
				log.error(errorMessage);
				throw new PersistenceException(errorMessage);
			}
			return parser.getEntity();
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}
	
	public void createTable(Class<?> aClass) throws PersistenceException {
		PersistentClass persistentClass = getFactory().getPersistenceConfiguration().getPersistentClass(aClass);
		if (persistentClass == null) {
			String errorMessage = aClass.getName()+ " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		try {
			String createTableQuery = persistentClass.getCreateTableStatement();
			PreparedStatement statement = getConnection().prepareStatement(createTableQuery);
			statement.execute();
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}
	
	public void dropTable(Class<?> aClass) throws PersistenceException {
		PersistentClass persistentClass = getFactory().getPersistenceConfiguration().getPersistentClass(aClass);
		if (persistentClass == null) {
			String errorMessage = aClass.getName()+ " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		try {
			String createTableQuery = persistentClass.getDropTableStatement();
			PreparedStatement statement = getConnection().prepareStatement(createTableQuery);
			statement.execute();
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}

	public void close() throws PersistenceException {
		try {
			if (getConnection() != null && !getConnection().isClosed()) {
				getConnection().close();
			}
		} catch (SQLException e) {
			log.error(e.getMessage());
			throw new PersistenceException(e.getMessage());
		}
	}

	public PersistenceSessionFactory getFactory() {
		return factory;
	}

	public void setFactory(PersistenceSessionFactory factory) {
		this.factory = factory;
	}

	public Connection getConnection() {
		return connection;
	}

	public void setConnection(Connection connection) {
		this.connection = connection;
	}

	/* wtf a refaire!! */
	// public List query(Class clazz, String sql) throws SQLException{
	// PreparedStatement ps= connection.prepareStatement(sql);
	// ResultSet retSet= ps.executeQuery();
	// retSet.beforeFirst();
	//
	// ArrayList rList = new ArrayList();
	// while(retSet.next()){
	// rList.add(retSet.getObject(retSet.getRow()));
	// }
	//
	// return rList;
	//
	// }
	
	public Criteria createCriteria(Class<?> aClass) throws PersistenceException {
		PersistentClass persistentClass = getFactory().getPersistenceConfiguration().getPersistentClass(aClass);
		if (persistentClass == null) {
			String errorMessage = aClass.getName()+ " is not a managed class";
			log.error(errorMessage);
			throw new PersistenceException(errorMessage);
		}
		return createCriteria(persistentClass);
	}

	public Criteria createCriteria(PersistentClass persistentClass) {
		return new Criteria(persistentClass, this);
	}

}
