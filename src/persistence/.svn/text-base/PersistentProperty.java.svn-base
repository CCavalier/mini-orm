package persistence;

import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.PropertyUtils;

public class PersistentProperty {
	/*
	 * 
	 * Le nom de l'attribut, par exemple « title » pour Book La classe java
	 * de cet attribut Le nom de la colonne dans la table, par défaut le nom de
	 * l'attribut Le type SQL de la colonne, par exemple VARCHAR(255) true si la
	 * propriété est l'id
	 */
	private PersistentClass persistentClass;
	private Method method;
	private String name;
	private Class<?> clazz;
	private String columnName;
	private String sqlType;
	private boolean id;
	
	@SuppressWarnings("serial")
	private static Map<Class<?>, String> java2sql = new HashMap<Class<?>, String>() {
		{
			put(String.class, "VARCHAR(255)");
			put(BigDecimal.class, "NUMERIC");
			put(Long.class, "BIGINT");
			put(Integer.class, "INT");
		}
	};
	@SuppressWarnings("serial")
	private static final Map<Type, Class<?>> primitiveWrapper = new HashMap<Type, Class<?>>() {
		{
			put(int.class, Integer.class);
			put(double.class, Double.class);
			put(long.class, Long.class);
			put(boolean.class, Boolean.class);
			put(float.class, Float.class);
			put(char.class, Character.class);
			put(byte.class, Byte.class);
			put(void.class, Void.class);
			put(short.class, Short.class);
		}
	};

	public PersistentProperty(PersistentClass aPersistentClass, Method aMethod) {
		persistentClass = aPersistentClass;
		method = aMethod;
		parse();
		// this.clazz=persistentClass.getClazz();
		// this.name=method.getName();
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Class<?> getClazz() {
		return clazz;
	}

	public void setClazz(Class<?> clazz) {
		this.clazz = clazz;
	}

	public String getColumnName() {
		return columnName;
	}

	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}

	public String getSqlType() {
		return sqlType;
	}

	public void setSqlType(String sqlType) {
		this.sqlType = sqlType;
	}

	public boolean isId() {
		return id;
	}

	public void setId(boolean id) {
		this.id = id;
	}
	
	public Class<?> getClassOrWrapper() {
		if (getClazz().isPrimitive()) {
			return primitiveWrapper.get(getClazz());
		}
		return getClazz();
	}

	public void parse() {
		String methodName = method.getName();
		String propertyName = methodName.substring(3, 4).toLowerCase()
				+ methodName.substring(4);
		setName(propertyName);
		Class<?> rclazz = method.getReturnType();
		setClazz(rclazz);
		// Gestion des types primtif
		if (rclazz.isPrimitive()) {
			rclazz = primitiveWrapper.get(rclazz);
		}
		Column column = method.getAnnotation(Column.class);
		if (column != null && column.name().length() != 0)
			setColumnName(column.name());
		else
			setColumnName(propertyName);

		if (column != null && column.type().length() != 0) {
			setSqlType(column.type());
		} else {
			setSqlType(java2sql.get(rclazz));
		}

		Id id = method.getAnnotation(Id.class);
		if (id != null) {
			setId(true);
			persistentClass.setId(this);
			setSqlType("BIGINT GENERATED ALWAYS AS IDENTITY"); // A généraliser,
																// Carrement si
																// on mettait la
																// notation SQL
																// PRIMARY KEY ?
		}
	}

	public Object getValue(Object bean) throws PersistenceException {
		try {
			return PropertyUtils.getSimpleProperty(bean, getName());
		} catch (Exception e) {
			throw new PersistenceException("Cannot get property " + getName()
					+ " on object of class " + bean.getClass());
		}

	}

	public void setValue(Object bean, Object value) throws PersistenceException {
		Object valueConverted = ConvertUtils.convert(value, getClazz());
		try {
			PropertyUtils.setSimpleProperty(bean, getName(), valueConverted);
		} catch (Exception e) {
			throw new PersistenceException("Cannot set property " + getName()
					+ " on object of class " + bean.getClass());
		}
	}

}
