package persistence.criteria;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import persistence.PersistenceException;
import persistence.PersistenceSession;
import persistence.PersistentClass;
import persistence.PersistentProperty;

public class Criteria {
	
	private PersistentClass persistentClass;
	private Connection connection;
	private List<Restriction> restrictions;
	
	private static Logger log = LoggerFactory
	.getLogger(PersistenceSession.class);
	
	public List<Restriction> getRestrictions() {
		return restrictions;
	}

	public void setRestrictions(List<Restriction> restrictions) {
		this.restrictions = restrictions;
	}

	public PersistentClass getPersistentClass() {
		return persistentClass;
	}

	public void setPersistentClass(PersistentClass persistentClass) {
		this.persistentClass = persistentClass;
	}

	public Connection getConnection() {
		return connection;
	}

	public void setConnection(Connection connection) {
		this.connection = connection;
	}

	public Criteria(PersistentClass aPersistentClass, Connection aConnection) throws SQLException {
		persistentClass=aPersistentClass;
		connection=aConnection;
		restrictions = new LinkedList<Restriction>();
		
	}
	
	public void add(Restriction restriction) throws SQLException {
		getRestrictions().add(restriction);
		
	}
	
	private String generateQuery() {
		log.debug("Generation de la requete sql");
		StringBuilder result = new StringBuilder();
		result.append("Select * From ");
		result.append(persistentClass.getTableName());
		result.append(" ");
		if (restrictions.size() > 0) {
			result.append("Where ");
			result.append(restrictions.get(0).getProperty().getColumnName());
			result.append(" ");
			result.append(restrictions.get(0).getComparator());
			result.append(" ? ");
			for (int i = 1; i < restrictions.size(); i++) {
				result.append("And ");
				result.append(restrictions.get(i).getProperty().getColumnName());
				result.append(" ");
				result.append(restrictions.get(i).getComparator());
				result.append(" ? ");
			}
		}
		return result.toString();
	}
	
	private void setParameters(PreparedStatement statement) throws SQLException {
		log.debug("Initialialisation des paramètres de la requete");
		for (int i = 0; i < getRestrictions().size(); i++) {
			Restriction aRestriction = getRestrictions().get(i);
			if (aRestriction.getProperty().getClassOrWrapper().equals(String.class)) {
				statement.setString(i + 1, (String) aRestriction.getValue());
			}
			if (aRestriction.getProperty().getClassOrWrapper().equals(Integer.class)) {
				statement.setInt(i + 1, (Integer) aRestriction.getValue());
			}
			if (aRestriction.getProperty().getClassOrWrapper().equals(Double.class)) {
				statement.setDouble(i + 1, (Double) aRestriction.getValue());
			}
			if (aRestriction.getProperty().getClassOrWrapper().equals(Long.class)) {
				statement.setLong(i + 1, (Long) aRestriction.getValue());
			}
		}
	}
	
	public List<Object> list() throws SQLException, PersistenceException {
		try {
			String query = generateQuery();
			PreparedStatement statement = getConnection().prepareStatement(query);
			setParameters(statement);
			log.info("Execution de la requete "+ query);
			ResultSet resultSet = statement.executeQuery();
			log.debug("Parsing du résultat");
			List<Object> results = new ArrayList<Object>();
			while(resultSet.next()){
				Object newInstance = persistentClass.createInstance();
				for (PersistentProperty aProperty : persistentClass.getPersistentProperties()) {
					aProperty.setValue(newInstance, resultSet.getObject(aProperty.getColumnName()));
				}
				results.add(newInstance);
				resultSet.next();
			}
			return results;
		} catch (SQLException exception) {
			throw new PersistenceException(exception.getMessage());
		}
	}
	
	public Object singleResult() throws PersistenceException {
		try {
			String query = generateQuery();
			PreparedStatement statement = getConnection().prepareStatement(query);
			setParameters(statement);
			log.info("Execution de la requete "+ query);
			ResultSet resultSet = statement.executeQuery();
			log.debug("Parsing du résultat");
			resultSet.next();
			Object newInstance = persistentClass.createInstance();
			for (PersistentProperty aProperty : persistentClass.getPersistentProperties()) {
				aProperty.setValue(newInstance, resultSet.getObject(aProperty.getColumnName()));
			}
			if(resultSet.next()){
				throw new PersistenceException("La requete a renvoye plusieurs resultats");
			}else{
				return newInstance;
			}
		} catch (SQLException exception) {
			throw new PersistenceException(exception.getMessage());
		}
	}
	
}
